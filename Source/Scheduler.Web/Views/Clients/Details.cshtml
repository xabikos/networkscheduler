@using Scheduler.Common
@model ClientDevice

@{
    ViewBag.Title = "title";
}

<h4>Configuring client @Model.Name</h4>
<h5 id="clientStatus">Status: Disconnected</h5>

<table id="commands" class="table table-striped table-bordered" cellspacing="0" width="100%">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Category
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var command in (IEnumerable<MachineCommand>)ViewBag.AvailableCommands)
        {
            <tr>
                <td>@command.Name</td>
                <td>@command.Category</td>
                <td>
                    @Html.ActionLink("Trigger", command.Id.ToString(), null, new { @class = "btn btn-default manualCommand" })
                    @Html.ActionLink("Schedule", "", null, new { @class = "btn btn-default btn-primary scheduleCommand" })
                </td>
            </tr>
        }
    </tbody>
</table>

@section scripts{
    <script type="text/javascript">
        $(function () {
        
            var connection = $.hubConnection('http://localhost:8080/');
            var managementProxy = connection.createHubProxy('ManagementHub');

            managementProxy.on('connectedClients', function (connectedClients) {
                connectedClients.forEach(function(cl) {
                    if (cl === '@Model.Name') {
                        $('#clientStatus').html('Status: Connected');
                    }
                });
            });

            var clientsProxy = connection.createHubProxy('ClientsHub');

            clientsProxy.on('commandExecutionFailed', function (message) {
                // Display an error toast, with a title
                toastr.error(message, 'Command execution failed!');
            });

            connection.start()
                .done(function () {
                    managementProxy.invoke('GetConnectedClients');
                })
                .fail(function () { alert("Could not Connect!"); });

            $('a.manualCommand').on('click', function(e) {
                e.preventDefault();
                var urlChunks = e.target.pathname.split('/');
                var commandId = urlChunks[urlChunks.length - 1];
                clientsProxy.invoke('ExecuteCommand', '@Model.Id', commandId);
            });
        });
    </script>
}